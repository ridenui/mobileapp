# This is a basic workflow to help you get started with Actions

name: publish-to-cocoapods

# Controls when the workflow will run
on: [push, workflow_dispatch]

jobs:
  build:
    # Our self hosted runner
    runs-on: self-hosted

    if: "!startsWith(github.event.head_commit.message, 'chore(release): ')"

    steps:
      - name: Configuring Git
        run: |
          git config --global user.name "high5-bot"
          git config --global user.email "me+high5@dunklestoast.de"

      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          token: ${{ secrets.HIGH5_BOT_TOKEN }}

      # Checkout certificates
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          token: ${{ secrets.HIGH5_BOT_TOKEN }}
          repository: 'ridenui/certificates'
          path: 'certificates'

      - uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '^13.2.1'

      - uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Install yarn
        run: npm i yarn --global

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Installing dependencies
        run: yarn

      - uses: ruby/setup-ruby@v1
        env:
          ImageOS: macos11
        with:
          ruby-version: 2.7.2
          bundler-cache: true # runs 'bundle install' and caches installed gems automatically

      - uses: actions/cache@v2
        with:
          path: ios/Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-

      - name: Install pods
        run: (cd ios && bundle exec pod install)

      - name: Install certificate and provisioning profile
        run: |
          CERTIFICATE_PATH=./certificates/Certificates/Distribution\ Certificate.p12
          PP_PATH=./certificates/Provisioning\ Profiles/Riden_Ad_Hoc.mobileprovision
          KEYCHAIN_PASSWORD=pw
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          
          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # import certificate to keychain
          security import $CERTIFICATE_PATH -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          
          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Build app
        run: fastlane ios ci

  cleanup:
    runs-on: self-hosted
    needs: [build]
    if: always()
    steps:
      - name: Clean up keychain and provisioning profile
        if: ${{ always() }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision
